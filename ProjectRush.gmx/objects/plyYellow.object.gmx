<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spYellow</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>parPlayer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//This is projectile bonus speed, base speed is added in actFire
projSpeed = 0
//This is the full projectile damage.
projDamage = 0
//Cooldown in frames for next bullet
autoCool = 20
//Initialize variables so we don't crash
firing = false
fireCool = 0

playerSpeed = 2
instance_create(x,y,mskYellow)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* TO DO #########################
Toggle gamepad
give look a deadzone for changing the mask
Add test projectiles

*/

//Movement

//Keyboard- Courtesy of BBGaming
if global.player2Bound &lt; 0
{
    dx = (keyboard_check(global.rRight)) - (keyboard_check(global.rLeft));
    dy = (keyboard_check(global.rDown)) - (keyboard_check(global.rUp));
    if (dx!=0 or dy!=0) 
    {
        m=sqrt(sqr(dx)+sqr(dy));
        dx/=m;
        dy/=m;
        if !place_meeting(x+dx*playerSpeed,y,objSolid)
    {
        x+=dx*playerSpeed;
    }
        if !place_meeting(x,y+dy*playerSpeed,objSolid)
            y+=dy*playerSpeed;
    }
    //Point towards mouse
    mask_image_angle=point_direction(x,y,mouse_x,mouse_y)
}
//Gamepad - looking for original source
//Xbox left stick movement
else
{
    //Checking manually for objSolid- ignoring garbage implemented solid collisions.
    
    //ADD DIRECTIONAL CHANGE --------------------------------------------------------------------------------------------------------------------------------


        if !place_meeting(x+gamepad_axis_value (global.player2Bound, gp_axislh) * playerSpeed,y,objSolid)
        hspeed = gamepad_axis_value (global.player2Bound, gp_axislh) * playerSpeed // x-axis movement, speed up is a number that controls how fast the player moves
        else
        hspeed = 0
        if !place_meeting(x,y+gamepad_axis_value (global.player2Bound, gp_axislv) * playerSpeed,objSolid)
        vspeed = gamepad_axis_value (global.player2Bound, gp_axislv) * playerSpeed // y-axis movement, speed up is a number that controls how fast the player moves, the - in front of gamepad_axis_value inverted the direction
        else
        vspeed = 0


    //this makes sure the player stays still when the stick is not being pressed due to the stick being slightly off center
    if hspeed &gt; 1 || hspeed &lt; -1
    {
    hspeed = hspeed
    }
    else
    {
    hspeed = 0
    }
    if vspeed &gt; 1 || vspeed &lt; -1
    {
    vspeed = vspeed
    }
    else
    {
    vspeed = 0
    }
    
    //Xbox right stick
    deadZone = 0.4
    //aims player in right direction
    //Radial deadzone
    dzRad = sqrt(sqr(gamepad_axis_value(global.player2Bound,gp_axisrh))+sqr(gamepad_axis_value(global.player2Bound,gp_axisrv)))
    if dzRad &gt; deadZone
    {
        mask_image_angle = point_direction(0, 0, gamepad_axis_value(global.player2Bound, gp_axisrh), gamepad_axis_value(global.player2Bound, gp_axisrv))
        firing = true
    }
    else
    {
        mask_image_angle = direction
        firing = false
    }
}

if global.player2Bound &lt; 0
    {
    if mouse_check_button(mb_left)
        firing = true
    else
        firing = false
    }
if fireCool &lt; 1
    {
    if firing
        {
            actFire(1,spBullet)
            fireCool = autoCool
        }
    }
else
    fireCool -= 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
